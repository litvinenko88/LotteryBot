const { Markup } = require("telegraf");
const userController = require("./userController");
const User = require("../models/User");
const { ADMIN_ID } = require("../config/bot");

const adminController = {
  getAdminKeyboard() {
    return Markup.keyboard([
      ["‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à", "üèÜ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à"],
      ["üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
      ["‚úâ –†–∞—Å—Å—ã–ª–∫–∞", "üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"],
      ["üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"],
    ]).resize();
  },

  async showAdminPanel(ctx) {
    if (String(ctx.from.id) !== ADMIN_ID) return;
    await ctx.reply("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", adminController.getAdminKeyboard());
  },

  async showStats(ctx) {
    if (String(ctx.from.id) !== ADMIN_ID) return;
    
    try {
      const totalUsers = await User.count();
      const todayUsers = await User.count({
        where: {
          createdAt: {
            [require('sequelize').Op.gte]: new Date(new Date().setHours(0, 0, 0, 0))
          }
        }
      });
      
      const statsMessage = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\nüë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}\nüéÜ –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: ${todayUsers}`;
      
      await ctx.reply(statsMessage, adminController.getAdminKeyboard());
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      await ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
  },

  async showUsers(ctx) {
    if (String(ctx.from.id) !== ADMIN_ID) return;
    
    try {
      const users = await User.findAll({
        order: [['createdAt', 'DESC']],
        limit: 20
      });
      
      if (users.length === 0) {
        await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', adminController.getAdminKeyboard());
        return;
      }
      
      let usersList = 'üë• –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n';
      
      users.forEach((user, index) => {
        const name = user.firstName || user.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
        const date = new Date(user.createdAt).toLocaleDateString('ru-RU');
        usersList += `${index + 1}. ${name} (ID: ${user.telegramId})\n–î–∞—Ç–∞: ${date}\n\n`;
      });
      
      await ctx.reply(usersList, adminController.getAdminKeyboard());
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      await ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
  },

  async backToMainMenu(ctx) {
    await userController.showMainMenu(ctx);
  },
};

module.exports = adminController;
