const User = require("../models/User");
const { Markup } = require("telegraf");

const getMainMenuKeyboard = () => {
  return Markup.keyboard([
    ["üéÅ –†–æ–∑—ã–≥—Ä—ã—à", "üé´ –ú–æ–∏ –±–∏–ª–µ—Ç—ã"],
    ["üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", "üìú –ò—Å—Ç–æ—Ä–∏—è"],
    ["üí∞ –ö–æ—à–µ–ª–µ–∫"],
  ]).resize();
};

module.exports = {
  async start(ctx) {
    const [user] = await User.findOrCreate({
      where: { telegramId: String(ctx.from.id) },
      defaults: {
        username: ctx.from.username,
        firstName: ctx.from.first_name,
        lastName: ctx.from.last_name,
      },
    });

    await ctx.reply(
      "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤–∞—à —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è.",
      Markup.inlineKeyboard([
        Markup.button.callback("üìú –ü—Ä–∞–≤–∏–ª–∞", "show_rules"),
      ])
    );
  },

  async showRules(ctx) {
    await ctx.reply(
      "–ó–¥–µ—Å—å –±—É–¥—É—Ç –≤–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞. –û—Å—Ç–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è —Ç–µ–∫—Å—Ç–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ:",
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚úÖ –û–∑–Ω–∞–∫–æ–º–∏–ª—Å—è", callback_data: "accept_rules" }],
          ],
        },
      }
    );
  },

  async acceptRules(ctx) {
    try {
      await User.update(
        { rulesAccepted: true },
        { where: { telegramId: String(ctx.from.id) } }
      );

      await ctx.reply(
        "–°–ø–∞—Å–∏–±–æ! –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø—Ä–∞–≤–∏–ª–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
        getMainMenuKeyboard()
      );
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.");
    }
  },

  getMainMenuKeyboard,
};
