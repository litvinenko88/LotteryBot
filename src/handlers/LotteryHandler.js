const { Markup } = require('telegraf');
const config = require('../config');

class LotteryHandler {
  constructor(userService) {
    this.userService = userService;
    this.lotteries = new Map(); // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
    this.tickets = new Map(); // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –±–∏–ª–µ—Ç–æ–≤
  }

  isAdmin(ctx) {
    return String(ctx.from.id) === config.ADMIN_ID;
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏
  async showLotteries(ctx) {
    const user = await this.userService.getUser(ctx.from.id);
    if (!user || !user.rulesAccepted) {
      return ctx.reply('–°–Ω–∞—á–∞–ª–∞ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏!');
    }

    if (this.lotteries.size === 0) {
      return ctx.reply('üéÅ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –ø–æ–∫–∞ –Ω–µ—Ç\\n\\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!');
    }

    let message = 'üéÅ –ê–ö–¢–ò–í–ù–´–ï –†–û–ó–´–ì–†–´–®–ò:\\n\\n';
    let buttons = [];
    
    for (const [id, lottery] of this.lotteries) {
      message += `üèÜ ${lottery.title}\\n`;
      message += `üí∞ –¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞: ${lottery.price} —Ä—É–±.\\n`;
      message += `üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${lottery.participants}/${lottery.maxParticipants}\\n`;
      message += `‚è∞ –î–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${lottery.timeLeft}\\n\\n`;
      
      buttons.push([`üé´ –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç - ${lottery.title}`]);
    }

    buttons.push(['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']);
    
    await ctx.reply(message, Markup.keyboard(buttons).resize());
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –±–∏–ª–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async showMyTickets(ctx) {
    const user = await this.userService.getUser(ctx.from.id);
    if (!user || !user.rulesAccepted) {
      return ctx.reply('–°–Ω–∞—á–∞–ª–∞ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏!');
    }

    const userTickets = Array.from(this.tickets.values()).filter(
      ticket => ticket.userId === ctx.from.id
    );

    if (userTickets.length === 0) {
      return ctx.reply('üé´ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±–∏–ª–µ—Ç–æ–≤\\n\\n–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –±–∏–ª–µ—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ "üéÅ –†–æ–∑—ã–≥—Ä—ã—à"');
    }

    let message = 'üé´ –í–ê–®–ò –ë–ò–õ–ï–¢–´:\\n\\n';
    
    userTickets.forEach((ticket, index) => {
      message += `${index + 1}. ${ticket.lotteryTitle}\\n`;
      message += `üé´ –ù–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞: ${ticket.number}\\n`;
      message += `üìÖ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: ${ticket.purchaseDate}\\n`;
      message += `üéØ –°—Ç–∞—Ç—É—Å: ${ticket.status}\\n\\n`;
    });

    await ctx.reply(message);
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—à–µ–ª–µ–∫
  async showWallet(ctx) {
    const user = await this.userService.getUser(ctx.from.id);
    if (!user || !user.rulesAccepted) {
      return ctx.reply('–°–Ω–∞—á–∞–ª–∞ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏!');
    }

    const balance = user.balance || 0;
    
    const message = `üí∞ –í–ê–® –ö–û–®–ï–õ–ï–ö\\n\\nüí≥ –ë–∞–ª–∞–Ω—Å: ${balance} —Ä—É–±.\\n\\nüí° –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö`;
    
    const keyboard = Markup.keyboard([
      ['üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫'],
      ['üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π'],
      ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
    ]).resize();

    await ctx.reply(message, keyboard);
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
  async showReferrals(ctx) {
    const user = await this.userService.getUser(ctx.from.id);
    if (!user || !user.rulesAccepted) {
      return ctx.reply('–°–Ω–∞—á–∞–ª–∞ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏!');
    }

    const referralLink = `https://t.me/your_bot?start=ref_${ctx.from.id}`;
    const referralsCount = 0; // –ó–∞–≥–ª—É—à–∫–∞
    const referralBonus = referralsCount * 50; // 50 —Ä—É–± –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞

    const message = `üë• –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê\\n\\n` +
      `üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\\n${referralLink}\\n\\n` +
      `üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${referralsCount} —á–µ–ª–æ–≤–µ–∫\\n` +
      `üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${referralBonus} —Ä—É–±.\\n\\n` +
      `üí° –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 50 —Ä—É–±–ª–µ–π –Ω–∞ –±–∞–ª–∞–Ω—Å!`;

    const keyboard = Markup.keyboard([
      ['üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π'],
      ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
    ]).resize();

    await ctx.reply(message, keyboard);
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é
  async showHistory(ctx) {
    const user = await this.userService.getUser(ctx.from.id);
    if (!user || !user.rulesAccepted) {
      return ctx.reply('–°–Ω–∞—á–∞–ª–∞ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏!');
    }

    const message = `üìú –ò–°–¢–û–†–ò–Ø –£–ß–ê–°–¢–ò–Ø\\n\\n` +
      `üé´ –í—Å–µ–≥–æ –±–∏–ª–µ—Ç–æ–≤: 0\\n` +
      `üèÜ –í—ã–∏–≥—Ä—ã—à–µ–π: 0\\n` +
      `üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: 0 —Ä—É–±.\\n` +
      `üéÅ –í—ã–∏–≥—Ä–∞–Ω–æ: 0 —Ä—É–±.\\n\\n` +
      `üìä –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö!`;

    await ctx.reply(message);
  }

  // –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
  async addLottery(ctx) {
    if (!this.isAdmin(ctx)) return;

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à
    const lotteryId = Date.now().toString();
    const lottery = {
      id: lotteryId,
      title: 'iPhone 15 Pro',
      price: 500,
      participants: 15,
      maxParticipants: 100,
      timeLeft: '2 –¥–Ω—è 5 —á–∞—Å–æ–≤',
      status: 'active'
    };

    this.lotteries.set(lotteryId, lottery);

    await ctx.reply(`‚úÖ –†–æ–∑—ã–≥—Ä—ã—à "${lottery.title}" –¥–æ–±–∞–≤–ª–µ–Ω!\\n\\n` +
      `üí∞ –¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞: ${lottery.price} —Ä—É–±.\\n` +
      `üë• –ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${lottery.maxParticipants}`);
  }

  async finishLottery(ctx) {
    if (!this.isAdmin(ctx)) return;

    if (this.lotteries.size === 0) {
      return ctx.reply('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è');
    }

    // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à
    const [lotteryId, lottery] = this.lotteries.entries().next().value;
    this.lotteries.delete(lotteryId);

    const winner = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #12345'; // –ó–∞–≥–ª—É—à–∫–∞
    
    await ctx.reply(`üèÜ –†–û–ó–´–ì–†–´–® –ó–ê–í–ï–†–®–ï–ù!\\n\\n` +
      `üéÅ –ü—Ä–∏–∑: ${lottery.title}\\n` +
      `üéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${winner}\\n` +
      `üé´ –í—ã–∏–≥—Ä—ã—à–Ω—ã–π –±–∏–ª–µ—Ç: #${Math.floor(Math.random() * 1000)}`);
  }

  async setPrice(ctx) {
    if (!this.isAdmin(ctx)) return;

    const message = `üí∞ –£–ü–†–ê–í–õ–ï–ù–ò–ï –¶–ï–ù–ê–ú–ò\\n\\n` +
      `–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –±–∏–ª–µ—Ç–æ–≤:\\n` +
      `üéÅ –û–±—ã—á–Ω—ã–π –ø—Ä–∏–∑: 100-500 —Ä—É–±.\\n` +
      `üèÜ –ü—Ä–µ–º–∏—É–º –ø—Ä–∏–∑: 500-1500 —Ä—É–±.\\n\\n` +
      `–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É`;

    await ctx.reply(message);
  }

  async broadcast(ctx) {
    if (!this.isAdmin(ctx)) return;

    const stats = await this.userService.getStats();
    
    const message = `‚úâ –†–ê–°–°–´–õ–ö–ê –°–û–û–ë–©–ï–ù–ò–ô\\n\\n` +
      `üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: ${stats.total}\\n\\n` +
      `üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞"`;

    const keyboard = Markup.keyboard([
      ['‚ùå –û—Ç–º–µ–Ω–∞'],
      ['üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å']
    ]).resize();

    await ctx.reply(message, keyboard);
  }
}

module.exports = LotteryHandler;