const { Markup } = require('telegraf');
const config = require('../config');

class AdminHandler {
  constructor(userService, bot) {
    this.userService = userService;
    this.bot = bot;
    this.lotteryCreation = new Map();
    this.activeLotteries = new Map(); // –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏
    this.tickets = new Map(); // –ë–∏–ª–µ—Ç—ã
    this.views = new Map(); // –ü—Ä–æ—Å–º–æ—Ç—Ä—ã
  }

  isAdmin(ctx) {
    return String(ctx.from.id) === config.ADMIN_ID;
  }

  async showLotteries(ctx) {
    if (!this.isAdmin(ctx)) return;
    
    if (this.activeLotteries.size === 0) {
      await ctx.reply('üéÅ –†–æ–∑—ã–≥—Ä—ã—à–∏\n\n–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –ø—É—Å—Ç');
      return;
    }
    
    let message = 'üéÅ –ê–ö–¢–ò–í–ù–´–ï –†–û–ó–´–ì–†–´–®–ò:\n\n';
    
    for (const [id, lottery] of this.activeLotteries) {
      const views = this.getViews(id);
      const participants = this.getParticipants(id);
      const ticketsCount = this.getTicketsCount(id);
      
      message += `üéÅ ${lottery.title}\n`;
      message += `üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${views}\n`;
      message += `üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${participants}\n`;
      message += `üé´ –ö—É–ø–ª–µ–Ω–æ –±–∏–ª–µ—Ç–æ–≤: ${ticketsCount}/${lottery.maxTickets}\n`;
      message += `üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ: ${lottery.endDate} –≤ ${lottery.endTime}\n\n`;
    }
    
    await ctx.reply(message);
  }
  
  getViews(lotteryId) {
    return Array.from(this.views.values()).filter(v => v.lotteryId === lotteryId).length;
  }
  
  getParticipants(lotteryId) {
    const participants = new Set();
    Array.from(this.tickets.values())
      .filter(t => t.lotteryId === lotteryId)
      .forEach(t => participants.add(t.userId));
    return participants.size;
  }
  
  getTicketsCount(lotteryId) {
    return Array.from(this.tickets.values()).filter(t => t.lotteryId === lotteryId).length;
  }

  async showBalance(ctx) {
    if (!this.isAdmin(ctx)) return;
    await ctx.reply('üí∞ –ë–∞–ª–∞–Ω—Å\n\n–û–±—â–∏–π –±–∞–ª–∞–Ω—Å —Å–∏—Å—Ç–µ–º—ã: 0 —Ä—É–±.');
  }

  async findWinner(ctx) {
    if (!this.isAdmin(ctx)) return;
    await ctx.reply('üèÜ –£–∑–Ω–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è\n\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è');
  }

  async startLotteryCreation(ctx) {
    if (!this.isAdmin(ctx)) return;
    
    this.lotteryCreation.set(ctx.from.id, { step: 'title' });
    await ctx.reply('‚ûï –°–û–ó–î–ê–ù–ò–ï –†–û–ó–´–ì–†–´–®–ê\n\n–®–∞–≥ 1/10: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:');
  }

  async handleLotteryCreation(ctx) {
    if (!this.isAdmin(ctx)) return false;
    
    const creation = this.lotteryCreation.get(ctx.from.id);
    if (!creation) return false;

    const text = ctx.message.text;
    const photo = ctx.message.photo;

    switch (creation.step) {
      case 'title':
        if (!text) return false;
        creation.title = text;
        creation.step = 'price';
        await ctx.reply('–®–∞–≥ 2/10: –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞ (–≤ —Ä—É–±–ª—è—Ö):');
        break;
        
      case 'price':
        if (!text || isNaN(text) || parseFloat(text) <= 0) {
          await ctx.reply('–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å:');
          return true;
        }
        creation.price = parseFloat(text);
        creation.step = 'description';
        await ctx.reply('–®–∞–≥ 3/10: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:');
        break;
        
      case 'description':
        if (!text) return false;
        creation.description = text;
        creation.step = 'link';
        await ctx.reply('–®–∞–≥ 4/10: –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä:');
        break;
        
      case 'link':
        if (!text) return false;
        creation.link = text;
        creation.step = 'photo';
        await ctx.reply('–®–∞–≥ 5/10: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:');
        break;
        
      case 'photo':
        if (!photo || !photo.length) {
          await ctx.reply('–û—à–∏–±–∫–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:');
          return true;
        }
        creation.photoId = photo[photo.length - 1].file_id;
        creation.step = 'tickets';
        await ctx.reply('–®–∞–≥ 6/10: –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:');
        break;
        
      case 'tickets':
        if (!text || isNaN(text) || parseInt(text) <= 0) {
          await ctx.reply('–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:');
          return true;
        }
        creation.maxTickets = parseInt(text);
        creation.step = 'date';
        await ctx.reply('–®–∞–≥ 7/10: –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì):');
        break;
        
      case 'date':
        if (!text || !/^\d{2}\.\d{2}\.\d{4}$/.test(text)) {
          await ctx.reply('–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:');
          return true;
        }
        creation.date = text;
        creation.step = 'time';
        await ctx.reply('–®–∞–≥ 8/10: –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (—Ñ–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú):');
        break;
        
      case 'time':
        if (!text || !/^\d{2}:\d{2}$/.test(text)) {
          await ctx.reply('–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:');
          return true;
        }
        creation.time = text;
        creation.step = 'endDate';
        await ctx.reply('–®–∞–≥ 9/10: –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì):');
        break;
        
      case 'endDate':
        if (!text || !/^\d{2}\.\d{2}\.\d{4}$/.test(text)) {
          await ctx.reply('–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:');
          return true;
        }
        creation.endDate = text;
        creation.step = 'endTime';
        await ctx.reply('–®–∞–≥ 10/10: –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (—Ñ–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú):');
        break;
        
      case 'endTime':
        if (!text || !/^\d{2}:\d{2}$/.test(text)) {
          await ctx.reply('–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:');
          return true;
        }
        creation.endTime = text;
        creation.step = 'complete';
        await this.showLotteryPreview(ctx, creation);
        break;
    }
    
    this.lotteryCreation.set(ctx.from.id, creation);
    return true;
  }

  async showLotteryPreview(ctx, lottery) {
    const message = `üéÅ ${lottery.title}\n\n` +
      `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞: ${lottery.price} —Ä—É–±.\n` +
      `üé´ –ö—É–ø–ª–µ–Ω–æ –±–∏–ª–µ—Ç–æ–≤: 0/${lottery.maxTickets}\n` +
      `üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ: ${lottery.endDate} –≤ ${lottery.endTime}\n\n` +
      `üìù ${lottery.description}\n\n` +
      `üîó ${lottery.link}`;

    const keyboard = Markup.keyboard([
      ['üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å'],
      ['‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', '‚úÖ –î–æ–±–∞–≤–∏—Ç—å']
    ]).resize();

    await ctx.replyWithPhoto(lottery.photoId, { caption: message, reply_markup: keyboard.reply_markup });
  }

  async previewLottery(ctx) {
    if (!this.isAdmin(ctx)) return;
    
    const creation = this.lotteryCreation.get(ctx.from.id);
    if (!creation) return;

    const message = `üéÅ ${creation.title}\n\n` +
      `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞: ${creation.price} —Ä—É–±.\n` +
      `üé´ –ö—É–ø–ª–µ–Ω–æ –±–∏–ª–µ—Ç–æ–≤: 0/${creation.maxTickets}\n` +
      `üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ: ${creation.endDate} –≤ ${creation.endTime}\n\n` +
      `üìù ${creation.description}\n\n` +
      `üîó ${creation.link}`;

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üé´ –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç', 'buy_ticket')]
    ]);

    await ctx.replyWithPhoto(creation.photoId, { caption: message, reply_markup: keyboard.reply_markup });
    await ctx.reply('üëÜ –¢–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
  }

  async editLottery(ctx) {
    if (!this.isAdmin(ctx)) return;
    
    this.lotteryCreation.set(ctx.from.id, { step: 'title' });
    await ctx.reply('‚úèÔ∏è –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï\n\n–®–∞–≥ 1/10: –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:');
  }

  async saveLottery(ctx) {
    if (!this.isAdmin(ctx)) return;
    
    const creation = this.lotteryCreation.get(ctx.from.id);
    if (!creation) return;

    const lotteryId = Date.now();
    creation.id = lotteryId;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏
    this.activeLotteries.set(lotteryId, creation);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏–µ
    this.scheduleDrawing(creation);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    await this.notifyAllUsers(creation, ctx);
    
    this.lotteryCreation.delete(ctx.from.id);
    await this.showPanel(ctx);
  }
  
  scheduleDrawing(lottery) {
    const now = new Date();
    const [day, month, year] = lottery.endDate.split('.');
    const [hours, minutes] = lottery.endTime.split(':');
    const endDate = new Date(year, month - 1, day, hours, minutes);
    
    if (endDate > now) {
      setTimeout(() => {
        this.conductDrawing(lottery.id);
      }, endDate.getTime() - now.getTime());
    }
  }
  
  async conductDrawing(lotteryId) {
    const lottery = this.activeLotteries.get(lotteryId);
    if (!lottery) return;
    
    const lotteryTickets = Array.from(this.tickets.values()).filter(t => t.lotteryId === lotteryId);
    
    if (lotteryTickets.length === 0) {
      this.activeLotteries.delete(lotteryId);
      return;
    }
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –±–∏–ª–µ—Ç
    const winningTicket = lotteryTickets[Math.floor(Math.random() * lotteryTickets.length)];
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
    await this.notifyWinner(winningTicket, lottery);
    
    // –£–¥–∞–ª—è–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    this.activeLotteries.delete(lotteryId);
  }
  
  async notifyWinner(ticket, lottery) {
    try {
      const message = `üéâ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú!\n\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!\n\nüéÅ –ü—Ä–∏–∑: ${lottery.title}\nüé´ –í—ã–∏–≥—Ä—ã—à–Ω—ã–π –±–∏–ª–µ—Ç: ${ticket.id}\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞!`;
      
      const imagePath = require('path').join(process.cwd(), 'images', 'pobeda.jpeg');
      
      if (require('fs').existsSync(imagePath)) {
        await this.bot.telegram.sendPhoto(ticket.userId, { source: imagePath }, { caption: message });
      } else {
        await this.bot.telegram.sendMessage(ticket.userId, message);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è:', error);
    }
  }
  
  async buyTicket(userId, lotteryId) {
    const lottery = this.activeLotteries.get(lotteryId);
    if (!lottery) return null;
    
    const ticketId = `T${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    const ticket = {
      id: ticketId,
      lotteryId: lotteryId,
      userId: userId,
      price: lottery.price,
      createdAt: new Date()
    };
    
    this.tickets.set(ticketId, ticket);
    return ticket;
  }
  
  recordView(userId, lotteryId) {
    const viewId = `${userId}_${lotteryId}`;
    if (!this.views.has(viewId)) {
      this.views.set(viewId, { userId, lotteryId, createdAt: new Date() });
    }
  }

  async notifyAllUsers(lottery, ctx) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ª–æ–∂–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
      const now = new Date();
      const [day, month, year] = lottery.date.split('.');
      const [hours, minutes] = lottery.time.split(':');
      const scheduledDate = new Date(year, month - 1, day, hours, minutes);
      
      if (scheduledDate > now) {
        // –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
        setTimeout(() => {
          this.sendLotteryToUsers(lottery);
        }, scheduledDate.getTime() - now.getTime());
        
        await ctx.reply(`‚úÖ –†–æ–∑—ã–≥—Ä—ã—à –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ ${lottery.date} –≤ ${lottery.time}`);
      } else {
        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
        await this.sendLotteryToUsers(lottery);
        await ctx.reply('‚úÖ –†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    }
  }

  async sendLotteryToUsers(lottery) {
    try {
      const users = await this.userService.getAllUsers();
      const message = `üéâ –ù–û–í–´–ô –†–û–ó–´–ì–†–´–®!\n\nüéÅ ${lottery.title}\n\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞: ${lottery.price} —Ä—É–±.\nüé´ –ö—É–ø–ª–µ–Ω–æ –±–∏–ª–µ—Ç–æ–≤: 0/${lottery.maxTickets}\nüìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ: ${lottery.endDate} –≤ ${lottery.endTime}\n\nüìù ${lottery.description}\n\nüîó ${lottery.link}`;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üé´ –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç', `buy_ticket_${lottery.id}`)]
      ]);
      
      for (const user of users) {
        try {
          await this.bot.telegram.sendPhoto(user.telegramId, lottery.photoId, { 
            caption: message,
            reply_markup: keyboard.reply_markup
          });
          
          // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä
          this.recordView(user.telegramId, lottery.id);
        } catch (error) {
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
    }
  }

  async showPanel(ctx) {
    if (!this.isAdmin(ctx)) return;
    
    const keyboard = Markup.keyboard([
      ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à', 'üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏'],
      ['üéÅ –†–æ–∑—ã–≥—Ä—ã—à–∏', '‚úâ –†–∞—Å—Å—ã–ª–∫–∞'],
      ['üß™ –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', 'üí∞ –ë–∞–ª–∞–Ω—Å'],
      ['üèÜ –£–∑–Ω–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']
    ]).resize();

    await ctx.reply('–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:', keyboard);
  }

  async showStats(ctx) {
    if (!this.isAdmin(ctx)) return;

    try {
      const stats = await this.userService.getStats();
      const message = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\nüë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.total}\nüÜï –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: ${stats.today}`;
      await ctx.reply(message);
    } catch (error) {
      await ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
  }

  async showUsers(ctx) {
    if (!this.isAdmin(ctx)) return;

    try {
      const users = await this.userService.getRecentUsers();
      
      if (users.length === 0) {
        await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
      }

      let message = 'üë• –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n';
      users.forEach((user, index) => {
        const name = user.firstName || user.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
        const date = new Date(user.createdAt).toLocaleDateString('ru-RU');
        message += `${index + 1}. ${name}\n–î–∞—Ç–∞: ${date}\n\n`;
      });

      await ctx.reply(message);
    } catch (error) {
      await ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
  }

  async showSubscribers(ctx) {
    if (!this.isAdmin(ctx)) return;

    try {
      const users = await this.userService.getRecentUsers();
      const stats = await this.userService.getStats();
      
      if (users.length === 0) {
        await ctx.reply('–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
      }

      let message = `üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ (${stats.total}):\n\n`;
      
      users.forEach((user, index) => {
        const username = user.username ? `@${user.username}` : '–ù–µ—Ç –Ω–∏–∫–∞';
        message += `${index + 1}. ${username}\n`;
      });

      await ctx.reply(message);
    } catch (error) {
      await ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤');
    }
  }
}

module.exports = AdminHandler;