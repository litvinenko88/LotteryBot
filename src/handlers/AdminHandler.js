const { Markup } = require('telegraf');
const config = require('../config');

class AdminHandler {
  constructor(userService) {
    this.userService = userService;
  }

  isAdmin(ctx) {
    return String(ctx.from.id) === config.ADMIN_ID;
  }

  async showPanel(ctx) {
    if (!this.isAdmin(ctx)) return;
    
    const keyboard = Markup.keyboard([
      ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏'],
      ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à', 'üèÜ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à'],
      ['üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É', '‚úâ –†–∞—Å—Å—ã–ª–∫–∞'],
      ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
    ]).resize();

    await ctx.reply('–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:', keyboard);
  }

  async showStats(ctx) {
    if (!this.isAdmin(ctx)) return;

    try {
      const stats = await this.userService.getStats();
      const message = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\nüë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.total}\nüÜï –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: ${stats.today}`;
      await ctx.reply(message);
    } catch (error) {
      await ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
  }

  async showUsers(ctx) {
    if (!this.isAdmin(ctx)) return;

    try {
      const users = await this.userService.getRecentUsers();
      
      if (users.length === 0) {
        await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
      }

      let message = 'üë• –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n';
      users.forEach((user, index) => {
        const name = user.firstName || user.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
        const date = new Date(user.createdAt).toLocaleDateString('ru-RU');
        message += `${index + 1}. ${name}\n–î–∞—Ç–∞: ${date}\n\n`;
      });

      await ctx.reply(message);
    } catch (error) {
      await ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
  }

  async showSubscribers(ctx) {
    if (!this.isAdmin(ctx)) return;

    try {
      const users = await this.userService.getRecentUsers();
      const stats = await this.userService.getStats();
      
      if (users.length === 0) {
        await ctx.reply('–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
      }

      let message = `üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ (${stats.total}):\n\n`;
      
      users.forEach((user, index) => {
        const name = user.firstName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
        const username = user.username ? `@${user.username}` : '–ù–µ—Ç –Ω–∏–∫–∞';
        const date = new Date(user.createdAt).toLocaleDateString('ru-RU');
        
        message += `${index + 1}. ${name}\n${username}\n–î–∞—Ç–∞: ${date}\n\n`;
      });

      await ctx.reply(message);
    } catch (error) {
      await ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤');
    }
  }
}

module.exports = AdminHandler;