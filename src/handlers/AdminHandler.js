const { Markup } = require('telegraf');
const config = require('../config');

class AdminHandler {
  constructor(userService, bot) {
    this.userService = userService;
    this.bot = bot;
    this.lotteryCreation = new Map(); // –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞
  }

  isAdmin(ctx) {
    return String(ctx.from.id) === config.ADMIN_ID;
  }

  async showLotteries(ctx) {
    if (!this.isAdmin(ctx)) return;
    await ctx.reply('üéÅ –†–æ–∑—ã–≥—Ä—ã—à–∏\n\n–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –ø—É—Å—Ç');
  }

  async showBalance(ctx) {
    if (!this.isAdmin(ctx)) return;
    await ctx.reply('üí∞ –ë–∞–ª–∞–Ω—Å\n\n–û–±—â–∏–π –±–∞–ª–∞–Ω—Å —Å–∏—Å—Ç–µ–º—ã: 0 —Ä—É–±.');
  }

  async findWinner(ctx) {
    if (!this.isAdmin(ctx)) return;
    await ctx.reply('üèÜ –£–∑–Ω–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è\n\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è');
  }

  async startLotteryCreation(ctx) {
    if (!this.isAdmin(ctx)) return;
    
    this.lotteryCreation.set(ctx.from.id, { step: 'title' });
    await ctx.reply('‚ûï –°–û–ó–î–ê–ù–ò–ï –†–û–ó–´–ì–†–´–®–ê\n\n–®–∞–≥ 1/5: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:');
  }

  async handleLotteryCreation(ctx) {
    if (!this.isAdmin(ctx)) return false;
    
    const creation = this.lotteryCreation.get(ctx.from.id);
    if (!creation) return false;

    const text = ctx.message.text;
    const photo = ctx.message.photo;

    switch (creation.step) {
      case 'title':
        if (!text) return false;
        creation.title = text;
        creation.step = 'price';
        await ctx.reply('–®–∞–≥ 2/5: –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞ (–≤ —Ä—É–±–ª—è—Ö):');
        break;
        
      case 'price':
        if (!text || isNaN(text) || parseFloat(text) <= 0) {
          await ctx.reply('–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å:');
          return true;
        }
        creation.price = parseFloat(text);
        creation.step = 'description';
        await ctx.reply('–®–∞–≥ 3/5: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:');
        break;
        
      case 'description':
        if (!text) return false;
        creation.description = text;
        creation.step = 'link';
        await ctx.reply('–®–∞–≥ 4/5: –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä:');
        break;
        
      case 'link':
        if (!text) return false;
        creation.link = text;
        creation.step = 'photo';
        await ctx.reply('–®–∞–≥ 5/5: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:');
        break;
        
      case 'photo':
        if (!photo || !photo.length) {
          await ctx.reply('–û—à–∏–±–∫–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:');
          return true;
        }
        creation.photoId = photo[photo.length - 1].file_id;
        creation.step = 'complete';
        await this.showLotteryPreview(ctx, creation);
        break;
    }
    
    this.lotteryCreation.set(ctx.from.id, creation);
    return true;
  }

  async showLotteryPreview(ctx, lottery) {
    const message = `üéÅ ${lottery.title}\n\n` +
      `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞: ${lottery.price} —Ä—É–±.\n\n` +
      `üìù ${lottery.description}\n\n` +
      `üîó ${lottery.link}`;

    const keyboard = Markup.keyboard([
      ['üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å'],
      ['‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', '‚úÖ –î–æ–±–∞–≤–∏—Ç—å']
    ]).resize();

    await ctx.replyWithPhoto(lottery.photoId, { caption: message, reply_markup: keyboard.reply_markup });
  }

  async previewLottery(ctx) {
    if (!this.isAdmin(ctx)) return;
    
    const creation = this.lotteryCreation.get(ctx.from.id);
    if (!creation) return;

    const message = `üéÅ ${creation.title}\n\n` +
      `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞: ${creation.price} —Ä—É–±.\n` +
      `üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: 0/100\n\n` +
      `üìù ${creation.description}\n\n` +
      `üîó ${creation.link}\n\n` +
      `üé´ –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç`;

    await ctx.replyWithPhoto(creation.photoId, { caption: message });
    await ctx.reply('üëÜ –¢–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
  }

  async editLottery(ctx) {
    if (!this.isAdmin(ctx)) return;
    
    this.lotteryCreation.set(ctx.from.id, { step: 'title' });
    await ctx.reply('‚úèÔ∏è –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï\n\n–®–∞–≥ 1/5: –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:');
  }

  async saveLottery(ctx) {
    if (!this.isAdmin(ctx)) return;
    
    const creation = this.lotteryCreation.get(ctx.from.id);
    if (!creation) return;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É (–∑–∞–≥–ª—É—à–∫–∞)
    const lotteryId = Date.now();
    
    await ctx.reply('‚úÖ –†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    await this.notifyAllUsers(creation);
    
    this.lotteryCreation.delete(ctx.from.id);
    await this.showPanel(ctx);
  }

  async notifyAllUsers(lottery) {
    try {
      const users = await this.userService.getAllUsers();
      const message = `üéâ –ù–û–í–´–ô –†–û–ó–´–ì–†–´–®!\n\nüéÅ ${lottery.title}\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞: ${lottery.price} —Ä—É–±.\n\n–ü—Ä–∏–Ω–∏–º–∞–π—Ç–µ —É—á–∞—Å—Ç–∏–µ! üé´`;
      
      for (const user of users) {
        try {
          await this.bot.telegram.sendPhoto(user.telegramId, lottery.photoId, { caption: message });
        } catch (error) {
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
    }
  }

  async showPanel(ctx) {
    if (!this.isAdmin(ctx)) return;
    
    const keyboard = Markup.keyboard([
      ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à', 'üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏'],
      ['üéÅ –†–æ–∑—ã–≥—Ä—ã—à–∏', '‚úâ –†–∞—Å—Å—ã–ª–∫–∞'],
      ['üß™ –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', 'üí∞ –ë–∞–ª–∞–Ω—Å'],
      ['üèÜ –£–∑–Ω–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']
    ]).resize();

    await ctx.reply('–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:', keyboard);
  }

  async showStats(ctx) {
    if (!this.isAdmin(ctx)) return;

    try {
      const stats = await this.userService.getStats();
      const message = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\nüë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.total}\nüÜï –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: ${stats.today}`;
      await ctx.reply(message);
    } catch (error) {
      await ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
  }

  async showUsers(ctx) {
    if (!this.isAdmin(ctx)) return;

    try {
      const users = await this.userService.getRecentUsers();
      
      if (users.length === 0) {
        await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
      }

      let message = 'üë• –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n';
      users.forEach((user, index) => {
        const name = user.firstName || user.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
        const date = new Date(user.createdAt).toLocaleDateString('ru-RU');
        message += `${index + 1}. ${name}\n–î–∞—Ç–∞: ${date}\n\n`;
      });

      await ctx.reply(message);
    } catch (error) {
      await ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
  }

  async showSubscribers(ctx) {
    if (!this.isAdmin(ctx)) return;

    try {
      const users = await this.userService.getRecentUsers();
      const stats = await this.userService.getStats();
      
      if (users.length === 0) {
        await ctx.reply('–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
      }

      let message = `üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ (${stats.total}):\n\n`;
      
      users.forEach((user, index) => {
        const username = user.username ? `@${user.username}` : '–ù–µ—Ç –Ω–∏–∫–∞';
        message += `${index + 1}. ${username}\n`;
      });

      await ctx.reply(message);
    } catch (error) {
      await ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤');
    }
  }
}

module.exports = AdminHandler;