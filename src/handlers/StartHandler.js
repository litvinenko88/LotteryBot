const { Markup } = require('telegraf');
const config = require('../config');

class StartHandler {
  constructor(userService) {
    this.userService = userService;
  }

  async handle(ctx) {
    try {
      const { user, isNew } = await this.userService.createOrGetUser(ctx.from);
      const isAdmin = user.telegramId === config.ADMIN_ID;
      
      const keyboard = this.getMainKeyboard(isAdmin);
      
      if (isNew) {
        await ctx.reply(
          `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${ctx.from.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}! üéâ\n\n–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö!`,
          keyboard
        );
      } else {
        await ctx.reply(
          `–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${user.firstName || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}! üëã`,
          keyboard
        );
      }
    } catch (error) {
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  getMainKeyboard(isAdmin = false) {
    const buttons = [
      ['üéÅ –†–æ–∑—ã–≥—Ä—ã—à', 'üé´ –ú–æ–∏ –±–∏–ª–µ—Ç—ã'],
      ['üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', 'üìú –ò—Å—Ç–æ—Ä–∏—è'],
      ['üí∞ –ö–æ—à–µ–ª–µ–∫']
    ];

    if (isAdmin) {
      buttons.push(['üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å']);
    }

    return Markup.keyboard(buttons).resize();
  }
}

module.exports = StartHandler;