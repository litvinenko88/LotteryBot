const { Markup } = require('telegraf');

class ReferralService {
  constructor(userService, walletService) {
    this.userService = userService;
    this.walletService = walletService;
    this.referrals = new Map(); // userId -> [referredUserIds]
    this.referralBonus = 50; // –ë–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
  }

  async processReferral(newUserId, referrerId) {
    if (!referrerId || newUserId === referrerId) return false;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ—Ñ–µ—Ä–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const referrer = await this.userService.getUser(referrerId);
    if (!referrer) return false;

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    if (!this.referrals.has(referrerId)) {
      this.referrals.set(referrerId, []);
    }
    
    const referredUsers = this.referrals.get(referrerId);
    if (!referredUsers.includes(newUserId)) {
      referredUsers.push(newUserId);
      
      // –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É
      await this.walletService.addBalance(referrerId, this.referralBonus, '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å');
      
      return true;
    }
    
    return false;
  }

  getReferralCount(userId) {
    return this.referrals.get(userId)?.length || 0;
  }

  getReferralEarnings(userId) {
    return this.getReferralCount(userId) * this.referralBonus;
  }

  async showReferrals(ctx) {
    const referralLink = `https://t.me/your_bot?start=ref_${ctx.from.id}`;
    const referralsCount = this.getReferralCount(ctx.from.id);
    const referralBonus = this.getReferralEarnings(ctx.from.id);

    const message = `üë• –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê\n\n` +
      `üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n${referralLink}\n\n` +
      `üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${referralsCount} —á–µ–ª–æ–≤–µ–∫\n` +
      `üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${referralBonus} —Ä—É–±.\n\n` +
      `üí° –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ ${this.referralBonus} —Ä—É–±–ª–µ–π –Ω–∞ –±–∞–ª–∞–Ω—Å!`;

    const keyboard = Markup.keyboard([
      ['üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π'],
      ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
    ]).resize();

    await ctx.reply(message, keyboard);
  }

  async shareReferralLink(ctx) {
    const referralLink = `https://t.me/your_bot?start=ref_${ctx.from.id}`;
    
    await ctx.reply(`üì§ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏:\n\n${referralLink}\n\nüí∞ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ ${this.referralBonus} —Ä—É–±–ª–µ–π!`);
  }
}

module.exports = ReferralService;