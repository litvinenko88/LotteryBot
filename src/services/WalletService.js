const { Markup } = require('telegraf');

class WalletService {
  constructor(userService) {
    this.userService = userService;
    this.transactions = new Map(); // –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  }

  async getBalance(userId) {
    const user = await this.userService.getUser(userId);
    return user ? parseFloat(user.balance) || 0 : 0;
  }

  async addBalance(userId, amount, description = '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ') {
    const user = await this.userService.getUser(userId);
    if (!user) return false;

    const newBalance = parseFloat(user.balance || 0) + parseFloat(amount);
    await this.userService.updateBalance(userId, newBalance);
    
    this.addTransaction(userId, amount, 'income', description);
    return newBalance;
  }

  async deductBalance(userId, amount, description = '–ü–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–∞') {
    const user = await this.userService.getUser(userId);
    if (!user) return false;

    const currentBalance = parseFloat(user.balance || 0);
    if (currentBalance < amount) return false;

    const newBalance = currentBalance - parseFloat(amount);
    await this.userService.updateBalance(userId, newBalance);
    
    this.addTransaction(userId, -amount, 'expense', description);
    return newBalance;
  }

  addTransaction(userId, amount, type, description) {
    const transactionId = Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    this.transactions.set(transactionId, {
      id: transactionId,
      userId: userId,
      amount: amount,
      type: type,
      description: description,
      date: new Date()
    });
  }

  getTransactions(userId) {
    return Array.from(this.transactions.values())
      .filter(t => t.userId === userId)
      .sort((a, b) => b.date - a.date)
      .slice(0, 10);
  }

  async showWallet(ctx) {
    const balance = await this.getBalance(ctx.from.id);
    
    const message = `üí∞ –í–ê–® –ö–û–®–ï–õ–ï–ö\n\nüí≥ –ë–∞–ª–∞–Ω—Å: ${balance} —Ä—É–±.\n\nüí° –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö`;
    
    const keyboard = Markup.keyboard([
      ['üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫', 'üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π'],
      ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
    ]).resize();

    await ctx.reply(message, keyboard);
  }

  async showTopUp(ctx) {
    const keyboard = Markup.keyboard([
      ['üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞', 'üì± –°–ë–ü'],
      ['ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞', 'üí∏ –î—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã'],
      ['üîô –ù–∞–∑–∞–¥ –∫ –∫–æ—à–µ–ª—å–∫—É']
    ]).resize();

    await ctx.reply('üí≥ –ü–û–ü–û–õ–ù–ï–ù–ò–ï –ö–û–®–ï–õ–¨–ö–ê\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:', keyboard);
  }

  async showTransactionHistory(ctx) {
    const transactions = this.getTransactions(ctx.from.id);
    
    if (transactions.length === 0) {
      const keyboard = Markup.keyboard([['üîô –ù–∞–∑–∞–¥ –∫ –∫–æ—à–µ–ª—å–∫—É']]).resize();
      return ctx.reply('üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞', keyboard);
    }

    let message = 'üìä –ò–°–¢–û–†–ò–Ø –û–ü–ï–†–ê–¶–ò–ô\n\n';
    transactions.forEach((t, index) => {
      const sign = t.amount > 0 ? '+' : '';
      const emoji = t.amount > 0 ? 'üíö' : 'üí∏';
      message += `${emoji} ${sign}${t.amount} —Ä—É–±.\n`;
      message += `üìù ${t.description}\n`;
      message += `üìÖ ${t.date.toLocaleDateString('ru-RU')}\n\n`;
    });

    const keyboard = Markup.keyboard([['üîô –ù–∞–∑–∞–¥ –∫ –∫–æ—à–µ–ª—å–∫—É']]).resize();
    await ctx.reply(message, keyboard);
  }
}

module.exports = WalletService;