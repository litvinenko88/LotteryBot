const config = require('../config');
const logger = require('../utils/logger');
const DatabaseService = require('./DatabaseService');
const UserService = require('./UserService');
const StartHandler = require('../handlers/StartHandler');
const AdminHandler = require('../handlers/AdminHandler');
const TestHandler = require('../handlers/TestHandler');
const LotteryHandler = require('../handlers/LotteryHandler');
const WalletService = require('./WalletService');
const ReferralService = require('./ReferralService');

class BotService {
  constructor(bot) {
    this.bot = bot;
    this.setupMiddleware();
  }

  async init() {
    const { Sequelize } = require('sequelize');
    const sequelize = new Sequelize(config.DATABASE);
    
    this.dbService = new DatabaseService(sequelize);
    await this.dbService.init();
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
    const LotteryModel = require('../models/Lottery');
    const TicketModel = require('../models/Ticket');
    const LotteryViewModel = require('../models/LotteryView');
    
    this.dbService.sequelize.define('Lottery', LotteryModel(this.dbService.sequelize).rawAttributes, LotteryModel(this.dbService.sequelize).options);
    this.dbService.sequelize.define('Ticket', TicketModel(this.dbService.sequelize).rawAttributes, TicketModel(this.dbService.sequelize).options);
    this.dbService.sequelize.define('LotteryView', LotteryViewModel(this.dbService.sequelize).rawAttributes, LotteryViewModel(this.dbService.sequelize).options);
    
    this.userService = new UserService(this.dbService.getModel('User'));
    this.walletService = new WalletService(this.userService);
    this.referralService = new ReferralService(this.userService, this.walletService);
    
    this.startHandler = new StartHandler(this.userService, this.referralService);
    this.adminHandler = new AdminHandler(this.userService, this.bot, this.walletService);
    this.lotteryHandler = new LotteryHandler(this.userService, this.walletService);
    this.testHandler = new TestHandler(this.userService, this.startHandler, this.adminHandler);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    global.adminHandler = this.adminHandler;
    global.walletService = this.walletService;
    global.referralService = this.referralService;
    
    this.setupHandlers();
    logger.info('BotService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  setupMiddleware() {
    this.bot.use(async (ctx, next) => {
      ctx.isAdmin = String(ctx.from.id) === config.ADMIN_ID;
      return next();
    });
  }

  setupHandlers() {
    this.bot.start((ctx) => this.startHandler.handle(ctx));
    
    // –ê–¥–º–∏–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    this.bot.hears('üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', (ctx) => this.adminHandler.showPanel(ctx));
    this.bot.hears('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', (ctx) => this.adminHandler.showStats(ctx));
    this.bot.hears('üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏', (ctx) => this.adminHandler.showSubscribers(ctx));
    this.bot.hears('üéÅ –†–æ–∑—ã–≥—Ä—ã—à–∏', (ctx) => this.adminHandler.showLotteries(ctx));
    this.bot.hears('üí∞ –ë–∞–ª–∞–Ω—Å', (ctx) => this.adminHandler.showBalance(ctx));
    this.bot.hears('üèÜ –£–∑–Ω–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è', (ctx) => this.adminHandler.findWinner(ctx));
    this.bot.hears('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à', (ctx) => this.adminHandler.startLotteryCreation(ctx));
    this.bot.hears('üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å', (ctx) => this.adminHandler.previewLottery(ctx));
    this.bot.hears('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', (ctx) => this.adminHandler.editLottery(ctx));
    this.bot.hears('‚úÖ –î–æ–±–∞–≤–∏—Ç—å', (ctx) => this.adminHandler.saveLottery(ctx));
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫
    this.bot.action(/buy_ticket_(.+)/, async (ctx) => {
      const lotteryId = parseInt(ctx.match[1]);
      const result = await this.adminHandler.buyTicket(ctx.from.id, lotteryId);
      
      if (result && result.error === 'insufficient_funds') {
        await ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
        await ctx.reply(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${result.balance} —Ä—É–±.\nüí≥ –ù—É–∂–Ω–æ: ${result.required} —Ä—É–±.\n\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –≤ —Ä–∞–∑–¥–µ–ª–µ "üí∞ –ö–æ—à–µ–ª–µ–∫"`);
      } else if (result && result.id) {
        await ctx.answerCbQuery(`‚úÖ –ë–∏–ª–µ—Ç –∫—É–ø–ª–µ–Ω! ID: ${result.id}`);
        const newBalance = await this.walletService.getBalance(ctx.from.id);
        await ctx.reply(`üé´ –ë–∏–ª–µ—Ç —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω!\n\nüÜî ID –±–∏–ª–µ—Ç–∞: ${result.id}\nüí∞ –°–ø–∏—Å–∞–Ω–æ: ${result.price} —Ä—É–±.\nüí≥ –û—Å—Ç–∞–ª–æ—Å—å: ${newBalance} —Ä—É–±.`);
      } else {
        await ctx.answerCbQuery('‚ùå –†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
    });
    this.bot.hears('üèÜ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à', (ctx) => this.lotteryHandler.finishLottery(ctx));
    this.bot.hears('üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É', (ctx) => this.lotteryHandler.setPrice(ctx));
    this.bot.hears('‚úâ –†–∞—Å—Å—ã–ª–∫–∞', (ctx) => this.lotteryHandler.broadcast(ctx));
    
    // –¢–µ—Å—Ç–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    this.bot.hears('üß™ –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', (ctx) => this.testHandler.showTestPanel(ctx));
    this.bot.hears('üß™ –¢–µ—Å—Ç –∫–∞–∫ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', (ctx) => this.testHandler.testAsNewUser(ctx));
    this.bot.hears('üß™ –¢–µ—Å—Ç –∫–∞–∫ —Å—Ç–∞—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', (ctx) => this.testHandler.testAsOldUser(ctx));
    this.bot.hears('üß™ –¢–µ—Å—Ç –±–µ–∑ –ø—Ä–∏–Ω—è—Ç—ã—Ö –ø—Ä–∞–≤–∏–ª', (ctx) => this.testHandler.testWithoutRules(ctx));
    this.bot.hears('üß™ –¢–µ—Å—Ç —Å –ø—Ä–∏–Ω—è—Ç—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏', (ctx) => this.testHandler.testWithRules(ctx));
    this.bot.hears('üß™ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', (ctx) => this.testHandler.showAllUserButtons(ctx));
    this.bot.hears('üß™ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–¥–º–∏–Ω –∫–Ω–æ–ø–∫–∏', (ctx) => this.testHandler.showAllAdminButtons(ctx));
    this.bot.hears('üß™ –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞', (ctx) => this.testHandler.simulateFullProcess(ctx));
    this.bot.hears('üß™ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π', (ctx) => this.testHandler.testLotterySystem(ctx));
    this.bot.hears('üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', (ctx) => this.adminHandler.showPanel(ctx));
    this.bot.hears('üîô –ù–∞–∑–∞–¥ –∫ —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º', (ctx) => this.adminHandler.showLotteries(ctx));
    this.bot.hears('‚ùå –û—Ç–º–µ–Ω–∞', (ctx) => this.adminHandler.showPanel(ctx));
    this.bot.hears('üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', (ctx) => this.adminHandler.showPanel(ctx));
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    this.bot.hears('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', (ctx) => this.startHandler.handle(ctx));
    
    this.bot.hears('üìú –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏', (ctx) => this.startHandler.showRules(ctx));
    this.bot.hears('‚úÖ –Ø –æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏', (ctx) => this.startHandler.acceptRules(ctx));
    
    // –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('message', async (ctx) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (—Ç–µ–∫—Å—Ç –∏ —Ñ–æ—Ç–æ)
      if (await this.adminHandler.handleLotteryCreation(ctx)) {
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
      if (await this.testHandler.handleTestModeMessage(ctx)) {
        return;
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      if (!ctx.message.text) return;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–æ–∑—ã–≥—Ä—ã—à–∞
      const text = ctx.message.text;
      if (text && text.startsWith('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - ')) {
        const lotteryTitle = text.replace('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - ', '');
        await this.adminHandler.showLotteryStats(ctx, lotteryTitle);
        return;
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
      switch (text) {
        case 'üéÅ –†–æ–∑—ã–≥—Ä—ã—à':
          await this.lotteryHandler.showLotteries(ctx);
          break;
        case 'üé´ –ú–æ–∏ –±–∏–ª–µ—Ç—ã':
          await this.lotteryHandler.showMyTickets(ctx);
          break;
        case 'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã':
          await this.lotteryHandler.showReferrals(ctx);
          break;
        case 'üìú –ò—Å—Ç–æ—Ä–∏—è':
          await this.lotteryHandler.showHistory(ctx);
          break;
        case 'üí∞ –ö–æ—à–µ–ª–µ–∫':
          await this.walletService.showWallet(ctx);
          break;
        case 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫':
          await this.walletService.showTopUp(ctx);
          break;
        case 'üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π':
          await this.walletService.showTransactionHistory(ctx);
          break;
        case 'üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π':
          await this.referralService.shareReferralLink(ctx);
          break;
        case 'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã':
          await this.referralService.showReferrals(ctx);
          break;
        case 'üîô –ù–∞–∑–∞–¥ –∫ –∫–æ—à–µ–ª—å–∫—É':
          await this.walletService.showWallet(ctx);
          break;
        case 'üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞':
        case 'üì± –°–ë–ü':
        case 'ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞':
        case 'üí∏ –î—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã':
          await ctx.reply(`üí≥ –ü–û–ü–û–õ–ù–ï–ù–ò–ï –ß–ï–†–ï–ó "${text}"\n\nüîÑ –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞`);
          break;
        case 'üîô –ù–∞–∑–∞–¥':
          await this.startHandler.handle(ctx);
          break;
      }
    });
  }
}

module.exports = BotService;