const config = require('../config');
const logger = require('../utils/logger');
const DatabaseService = require('./DatabaseService');
const UserService = require('./UserService');
const StartHandler = require('../handlers/StartHandler');
const AdminHandler = require('../handlers/AdminHandler');
const TestHandler = require('../handlers/TestHandler');
const LotteryHandler = require('../handlers/LotteryHandler');

class BotService {
  constructor(bot) {
    this.bot = bot;
    this.setupMiddleware();
  }

  async init() {
    const { Sequelize } = require('sequelize');
    const sequelize = new Sequelize(config.DATABASE);
    
    this.dbService = new DatabaseService(sequelize);
    await this.dbService.init();
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å Lottery
    const LotteryModel = require('../models/Lottery');
    this.dbService.sequelize.define('Lottery', LotteryModel(this.dbService.sequelize).rawAttributes, LotteryModel(this.dbService.sequelize).options);
    
    this.userService = new UserService(this.dbService.getModel('User'));
    this.startHandler = new StartHandler(this.userService);
    this.adminHandler = new AdminHandler(this.userService, this.bot);
    this.lotteryHandler = new LotteryHandler(this.userService);
    this.testHandler = new TestHandler(this.userService, this.startHandler, this.adminHandler);
    
    this.setupHandlers();
    logger.info('BotService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  setupMiddleware() {
    this.bot.use(async (ctx, next) => {
      ctx.isAdmin = String(ctx.from.id) === config.ADMIN_ID;
      return next();
    });
  }

  setupHandlers() {
    this.bot.start((ctx) => this.startHandler.handle(ctx));
    
    // –ê–¥–º–∏–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    this.bot.hears('üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', (ctx) => this.adminHandler.showPanel(ctx));
    this.bot.hears('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', (ctx) => this.adminHandler.showStats(ctx));
    this.bot.hears('üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏', (ctx) => this.adminHandler.showSubscribers(ctx));
    this.bot.hears('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à', (ctx) => this.adminHandler.startLotteryCreation(ctx));
    this.bot.hears('üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å', (ctx) => this.adminHandler.previewLottery(ctx));
    this.bot.hears('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', (ctx) => this.adminHandler.editLottery(ctx));
    this.bot.hears('‚úÖ –î–æ–±–∞–≤–∏—Ç—å', (ctx) => this.adminHandler.saveLottery(ctx));
    this.bot.hears('üèÜ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à', (ctx) => this.lotteryHandler.finishLottery(ctx));
    this.bot.hears('üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É', (ctx) => this.lotteryHandler.setPrice(ctx));
    this.bot.hears('‚úâ –†–∞—Å—Å—ã–ª–∫–∞', (ctx) => this.lotteryHandler.broadcast(ctx));
    
    // –¢–µ—Å—Ç–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    this.bot.hears('üß™ –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', (ctx) => this.testHandler.showTestPanel(ctx));
    this.bot.hears('üß™ –¢–µ—Å—Ç –∫–∞–∫ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', (ctx) => this.testHandler.testAsNewUser(ctx));
    this.bot.hears('üß™ –¢–µ—Å—Ç –∫–∞–∫ —Å—Ç–∞—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', (ctx) => this.testHandler.testAsOldUser(ctx));
    this.bot.hears('üß™ –¢–µ—Å—Ç –±–µ–∑ –ø—Ä–∏–Ω—è—Ç—ã—Ö –ø—Ä–∞–≤–∏–ª', (ctx) => this.testHandler.testWithoutRules(ctx));
    this.bot.hears('üß™ –¢–µ—Å—Ç —Å –ø—Ä–∏–Ω—è—Ç—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏', (ctx) => this.testHandler.testWithRules(ctx));
    this.bot.hears('üß™ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', (ctx) => this.testHandler.showAllUserButtons(ctx));
    this.bot.hears('üß™ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–¥–º–∏–Ω –∫–Ω–æ–ø–∫–∏', (ctx) => this.testHandler.showAllAdminButtons(ctx));
    this.bot.hears('üß™ –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞', (ctx) => this.testHandler.simulateFullProcess(ctx));
    this.bot.hears('üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', (ctx) => this.testHandler.exitTestMode(ctx));
    this.bot.hears('‚ùå –û—Ç–º–µ–Ω–∞', (ctx) => this.adminHandler.showPanel(ctx));
    this.bot.hears('üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', (ctx) => this.adminHandler.showPanel(ctx));
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    this.bot.hears('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', (ctx) => this.startHandler.handle(ctx));
    
    this.bot.hears('üìú –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏', (ctx) => this.startHandler.showRules(ctx));
    this.bot.hears('‚úÖ –Ø –æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏', (ctx) => this.startHandler.acceptRules(ctx));
    
    // –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('message', async (ctx) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (—Ç–µ–∫—Å—Ç –∏ —Ñ–æ—Ç–æ)
      if (await this.adminHandler.handleLotteryCreation(ctx)) {
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
      if (await this.testHandler.handleTestModeMessage(ctx)) {
        return;
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      if (!ctx.message.text) return;
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
      const text = ctx.message.text;
      
      switch (text) {
        case 'üéÅ –†–æ–∑—ã–≥—Ä—ã—à':
          await this.lotteryHandler.showLotteries(ctx);
          break;
        case 'üé´ –ú–æ–∏ –±–∏–ª–µ—Ç—ã':
          await this.lotteryHandler.showMyTickets(ctx);
          break;
        case 'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã':
          await this.lotteryHandler.showReferrals(ctx);
          break;
        case 'üìú –ò—Å—Ç–æ—Ä–∏—è':
          await this.lotteryHandler.showHistory(ctx);
          break;
        case 'üí∞ –ö–æ—à–µ–ª–µ–∫':
          await this.lotteryHandler.showWallet(ctx);
          break;
        case 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫':
          await ctx.reply('üí≥ –ü–û–ü–û–õ–ù–ï–ù–ò–ï –ö–û–®–ï–õ–¨–ö–ê\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:', 
            Markup.keyboard([['üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞', 'üì± –°–ë–ü'], ['üîô –ù–∞–∑–∞–¥']]).resize());
          break;
        case 'üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π':
          await ctx.reply('üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞');
          break;
        case 'üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π':
          await ctx.reply('üì§ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏:\nhttps://t.me/your_bot?start=ref_' + ctx.from.id);
          break;
        case 'üîô –ù–∞–∑–∞–¥':
          await this.startHandler.handle(ctx);
          break;
      }
    });
  }
}

module.exports = BotService;